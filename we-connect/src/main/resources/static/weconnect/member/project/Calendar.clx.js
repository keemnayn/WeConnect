/*
 * App URI: member/project/Calendar
 * Source Location: member/project/Calendar.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.4584), Don't edit manually.
 */
(function() {
	var app = new cpr.core.App("member/project/Calendar", { 
		onPrepare: function(loader) {
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports) {
			var linker = {};
			// Start - User Script
			/************************************************
			 * Calendar.js
			 * Created at 2023. 8. 5. 오후 7:12:25.
			 *
			 * @author chwec
			 ************************************************/

			/*
			 * 캘린더에서 date-click 이벤트 발생 시 호출.
			 * Calendar의 날짜를 클릭 했을때 발생하는 이벤트.
			 */
			function onCalendarDateClick(e) {
				/** 
				 * @type cpr.controls.Calendar
				 */
				var calendar = e.control;
				
				var initValue = {
					start: e.date,
					end: e.date
				};
				
				// 신규 아이템 등록 팝업
				app.openDialog("dialog/CalendarItemDetail", {
					width: 600,
					height: 400
				}, function(dialog) {
					dialog.addEventListener("close", function(e) {
						var returnValue = dialog.returnValue;
						app.lookup("projectListSub").send();
						calendar.redraw();
					});
				});
			}

			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onProjectListSubSubmitSuccess(e) {
				//	var projectListSub = e.control;
				//	var calendar = app.lookup("calendar");
				//	var dataSet = app.lookup("projectList");
				//	var jsonData = JSON.parse(projectListSub.xhr.responseText);
				//	var projectList = jsonData.projectList[0];
				//	var projectName = jsonData.projectList[0].projectName;
				//	var projectStart = jsonData.projectList[0].projectStart;
				//	var projectEnd = jsonData.projectList[0].projectEnd;
				//	console.log(projectName);
				//	console.log(projectStart);
				//	console.log(projectEnd);
				//	
				//	for (var i = 0; i < projectList.length; i++) {
				//		let projectName = projectList[i].projectName;
				//		let projectStart = projectList[i].projectStart;
				//		let projectEnd = projectList[i].projectEnd;
				//		const dateRange = [projectStart, projectEnd];
				//		
				//		calendar.addAnniversary({
				//			date: dateRange,
				//			label: projectName
				//		});
				//	}
				var submission = app.lookup("projectListSub");
				var calendar = app.lookup("calendar");
				var dataSet = app.lookup("projectList");
				var jsonData = JSON.parse(submission.xhr.responseText);
				var projectList = jsonData.projectList;
				for (var i = 0; i < projectList.length; i++) {
					var projectName = jsonData.projectList[i].projectName;
					var projectStart = jsonData.projectList[i].projectStart;
					var projectEnd = jsonData.projectList[i].projectEnd;
					console.log(projectName);
					console.log(projectStart);
					console.log(projectEnd);
					//	calendar.addItem(new cpr.controls.CalendarItem("label", new Date(dataSet.getColumn("projectStart")), new Date(dataSet.getColumn("projectEnd"))));
					calendar.addItem(new cpr.controls.CalendarItem(projectName, new Date(projectStart), new Date(projectEnd)));
				}
			}

			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad2(e) {
				console.log("=============");
				var submission = app.lookup("projectListSub");
				submission.send();
			}
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("projectList");
			dataSet_1.parseData({
				"columns" : [
					{"name": "projectName"},
					{"name": "projectStart"},
					{"name": "projectEnd"}
				]
			});
			app.register(dataSet_1);
			var submission_1 = new cpr.protocols.Submission("projectListSub");
			submission_1.method = "get";
			submission_1.action = "member/project";
			submission_1.addResponseData(dataSet_1, false);
			if(typeof onProjectListSubSubmitSuccess == "function") {
				submission_1.addEventListener("submit-success", onProjectListSubSubmitSuccess);
			}
			app.register(submission_1);
			app.supportMedia("all and (min-width: 1920px)", "Project");
			app.supportMedia("all and (min-width: 1024px) and (max-width: 1919px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"height" : "100%"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var calendar_1 = new cpr.controls.Calendar("calendar");
			calendar_1.style.item.bind("background-color").toExpression([
				"switch(label){",
				"\tcase \"프로젝트\":\"LightGoldenRodYellow\"",
				"\tcase \"회의\":\"pink\"",
				"\tcase \"보고\":\"DarkSalmon\"",
				"\tcase \"외부\":\"LightBlue\"",
				"\tcase \"교육\":\"LightGreen\"",
				"\tcase \"기타\":\"AliceBlue\"",
				"}"
			].join("\n"));
			(function(calendar_1){
				calendar_1.setItemSet(app.lookup("projectList"), {
					"label": "projectName",
					"value": "projectName",
					"tooltip": "projectName",
					"start": "projectStart",
					"end": "projectEnd"
				});
			})(calendar_1);
			if(typeof onCalendarItemClick == "function") {
				calendar_1.addEventListener("item-click", onCalendarItemClick);
			}
			if(typeof onCalendarDateClick == "function") {
				calendar_1.addEventListener("date-click", onCalendarDateClick);
			}
			container.addChild(calendar_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyInit == "function"){
				app.addEventListener("init", onBodyInit);
			}
			if(typeof onBodyLoad2 == "function"){
				app.addEventListener("load", onBodyLoad2);
			}
		}
	});
	app.title = "Calendar";
	cpr.core.Platform.INSTANCE.register(app);
})();
