/*
 * App URI: member/project/TeamPost
 * Source Location: member/project/TeamPost.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.4584), Don't edit manually.
 */
(function() {
	var app = new cpr.core.App("member/project/TeamPost", { 
		onPrepare: function(loader) {
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports) {
			var linker = {};
			// Start - User Script
			/************************************************
			 * detail.js
			 * Created at 2023. 8. 7. 오전 10:08:05.
			 *
			 * @author keemn
			 ************************************************/

			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(e) {
				app.lookup("teamPostListSub").send();
				//	console.log(TMemberId);
				//		if (memberId == TMemberId) {
				//		app.lookup("updateBtn").visible = true;
				//		app.lookup("deleteBtn").visible = true;
				//	}
				var memberId = app.lookup("memberDTO").getValue("memberId");
				console.log(memberId);
				//app.lookup("grp").value = proposalId;
				//console.log(memberId == TMemberId);
			}

			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onTeamPostListSubSubmitSuccess(e) {
				var teamPostListSub = e.control;
				var xhr = teamPostListSub.xhr;
				var jsonData = JSON.parse(xhr.responseText);
				var teamPostList = jsonData.teamPostList;
				var comment = jsonData.comment;
				var container = app.lookup("grp");
				container.removeAllChildren();
				console.log(teamPostList.length);
				
				for (var i = 0; i < teamPostList.length; i++) {
					(function(index) {
						//udc 동적 생성
						var teamPostUdc = new udc.TeamPostUdc();
						teamPostUdc.name = teamPostList[i].memberName;
						teamPostUdc.date = teamPostList[i].teamPostCreateDate;
						teamPostUdc.title = teamPostList[i].teamPostTitle;
						teamPostUdc.content = teamPostList[i].teamPostContent;
						teamPostUdc.project = teamPostList[i].projectName;
						teamPostUdc.department = teamPostList[i].departmentName;
									
						container.addChild(teamPostUdc, {
							width: "1300px",
							height: "300px",
							autoSize: "both"
						});
						teamPostUdc.addEventListener("deleteClick", function(e) {
							app.lookup("teamPostIdParam").setValue("teamPostId", teamPostList[index].teamPostId);
							if (confirm("삭제하시겠습니까?")) {
								var teamPostDeleteSub = app.lookup("teamPostDeleteSub");
								teamPostDeleteSub.send();
							}
						});
					})(i);
				}
			}


			/*
			 * 인풋 박스에서 mousedown 이벤트 발생 시 호출.
			 * 사용자가 컨트롤 위에 포인터를 위치한 상태로 마우스 버튼을 누를 때 발생하는 이벤트.
			 */
			function onInsertIpbMousedown(e) {
				var insertIpb = e.control;
				app.openDialog("dialog/TeamPostCreate", {
					width: 1580,
					height: 780
				}, function(dialog) {
					dialog.addEventListener("close", function(e) {
						app.lookup("teamPostListSub").send();
					});
				});
			}

			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onTeamPostUpdateSubSubmitSuccess(e) {
				var teamPostUpdateSub = e.control;
				app.lookup("teamPostListSub").send();
				
			}

			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onTeamPostDeleteSubSubmitSuccess(e) {
				var teamPostDeleteSub = e.control;
				app.lookup("teamPostListSub").send();
			}

			/*
			 * 서치 인풋에서 search 이벤트 발생 시 호출.
			 * Searchinput의 enter키 또는 검색버튼을 클릭하여 인풋의 값이 Search될때 발생하는 이벤트
			 */
			function onSearchIpbSearch(e) {
				var searchIpb = e.control;
				var submission = app.lookup("searchTeamPostSub");
				submission.send();
			}

			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onSearchTeamPostSubSubmitSuccess(e) {
				var searchTeamPostSub = e.control;
				app.lookup("grp").redraw();
			}
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("teamPostSearch");
			dataSet_1.parseData({
				"columns": [
					{"name": "type"},
					{"name": "value"}
				],
				"rows": [
					{"type": "전체", "value": "all"},
					{"type": "제목", "value": "title"},
					{"type": "내용", "value": "content"},
					{"type": "프로젝트명", "value": "project"},
					{"type": "작성자", "value": "name"}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("teamPostList");
			dataSet_2.parseData({
				"columns": [
					{"name": "teamPostId"},
					{
						"name": "teamPostTitle",
						"dataType": "string"
					},
					{"name": "teamPostContent"},
					{"name": "teamPostCreateDate"},
					{"name": "memberName"},
					{"name": "projectName"},
					{"name": "departmentName"}
				],
				"rows": []
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("comment");
			dataSet_3.parseData({
				"columns": [
					{"name": "memberId"},
					{"name": "memberName"},
					{"name": "teamPostComment"},
					{"name": "date"}
				],
				"rows": []
			});
			app.register(dataSet_3);
			var dataMap_1 = new cpr.data.DataMap("searchParam");
			dataMap_1.parseData({
				"columns" : [
					{"name": "searchType"},
					{"name": "searchText"}
				]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("teamPostIdParam");
			dataMap_2.parseData({
				"columns" : [{
					"name": "teamPostId",
					"dataType": "number"
				}]
			});
			app.register(dataMap_2);
			
			var dataMap_3 = new cpr.data.DataMap("teamPostUpdateParam");
			dataMap_3.parseData({
				"columns" : [
					{
						"name": "teamPostId",
						"dataType": "number"
					},
					{"name": "teamPostTitle"},
					{
						"name": "teamPostContent",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_3);
			
			var dataMap_4 = new cpr.data.DataMap("memberDTO");
			dataMap_4.parseData({
				"columns" : [{
					"name": "memberId",
					"dataType": "string"
				}]
			});
			app.register(dataMap_4);
			var submission_1 = new cpr.protocols.Submission("teamPostListSub");
			submission_1.method = "get";
			submission_1.action = "member/teams/list";
			submission_1.addResponseData(dataSet_2, false);
			if(typeof onTeamPostListSubSubmitSuccess == "function") {
				submission_1.addEventListener("submit-success", onTeamPostListSubSubmitSuccess);
			}
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("commentSub");
			submission_2.method = "get";
			submission_2.action = "member/teams/comments";
			submission_2.addResponseData(dataSet_3, false);
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("teamPostUpdateSub");
			submission_3.method = "put";
			submission_3.action = "member/teams";
			submission_3.addRequestData(dataMap_3);
			if(typeof onTeamPostUpdateSubSubmitSuccess == "function") {
				submission_3.addEventListener("submit-success", onTeamPostUpdateSubSubmitSuccess);
			}
			app.register(submission_3);
			
			var submission_4 = new cpr.protocols.Submission("teamPostDeleteSub");
			submission_4.method = "delete";
			submission_4.action = "member/teams";
			submission_4.addRequestData(dataMap_2);
			if(typeof onTeamPostDeleteSubSubmitSuccess == "function") {
				submission_4.addEventListener("submit-success", onTeamPostDeleteSubSubmitSuccess);
			}
			app.register(submission_4);
			
			var submission_5 = new cpr.protocols.Submission("searchTeamPostSub");
			submission_5.method = "get";
			submission_5.action = "member/teams/search";
			submission_5.addRequestData(dataMap_1);
			submission_5.addResponseData(dataSet_2, false);
			if(typeof onSearchTeamPostSubSubmitSuccess == "function") {
				submission_5.addEventListener("submit-success", onSearchTeamPostSubSubmitSuccess);
			}
			app.register(submission_5);
			app.supportMedia("all and (min-width: 1920px)", "new-screen");
			app.supportMedia("all and (min-width: 1024px) and (max-width: 1919px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"border-bottom-style" : "none",
				"border-top-style" : "none",
				"border-right-style" : "none",
				"width" : "100%",
				"height" : "100%",
				"border-left-style" : "none"
			});
			
			// Layout
			var verticalLayout_1 = new cpr.controls.layouts.VerticalLayout();
			verticalLayout_1.distribution = "center";
			container.setLayout(verticalLayout_1);
			
			// UI Configuration
			var output_1 = new cpr.controls.Output("projectName");
			output_1.readOnly = true;
			output_1.value = "새소식";
			output_1.style.css({
				"font-weight" : "bold",
				"font-size" : "30px",
				"font-family" : "IBM Plex Sans KR SemiBold"
			});
			var dataRowContext_1 = new cpr.bind.DataRowContext(app.lookup("teamPostList"), 0);
			output_1.setBindContext(dataRowContext_1);
			container.addChild(output_1, {
				"width": "1540px",
				"height": "80px"
			});
			
			var inputBox_1 = new cpr.controls.InputBox("insertIpb");
			inputBox_1.placeholder = "보드 멤버들과 공유할 내용을 입력해보세요.";
			inputBox_1.style.css({
				"font-family" : "'IBM Plex Sans KR'"
			});
			if(typeof onInsertIpbMousedown == "function") {
				inputBox_1.addEventListener("mousedown", onInsertIpbMousedown);
			}
			container.addChild(inputBox_1, {
				"width": "1540px",
				"height": "131px"
			});
			
			var group_1 = new cpr.controls.Container("grp");
			group_1.style.setClasses(["cl-form-group"]);
			var verticalLayout_2 = new cpr.controls.layouts.VerticalLayout();
			group_1.setLayout(verticalLayout_2);
			container.addChild(group_1, {
				"autoSize": "height",
				"width": "1540px",
				"height": "300px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
		}
	});
	app.title = "TeamPost";
	cpr.core.Platform.INSTANCE.register(app);
})();
