/*
 * App URI: register/Register
 * Source Location: register/Register.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.4584), Don't edit manually.
 */
(function() {
	var app = new cpr.core.App("register/Register", { 
		onPrepare: function(loader) {
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports) {
			var linker = {};
			// Start - User Script
			/************************************************
			 * register1.js
			 * Created at 2023. 8. 7. 오전 11:45:06.
			 *
			 * @author kjh970605
			 ************************************************/

			/*
			 * "확인" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(e) {
				var button = e.control;
				app.lookup("registerSub").send();
			}

			/*
			 * 루트 컨테이너에서 init 이벤트 발생 시 호출.
			 * 앱이 최초 구성될 때 발생하는 이벤트 입니다.
			 */
			function onBodyInit(e) {
				let department = app.lookup("deparment");
				department.send();
			}

			/*
			 * "취소" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick2(e) {
				var button = e.control;
				let result = confirm("작성을 취소하시겠습니까?");
				if (result) {
					window.location.href = "login";
				}
			}

			/*
			 * "중복 확인" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick3(e) {
				var button = e.control;
				let submission = app.lookup("check");
				submission.send();
			}

			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onCheckSubmitSuccess(e) {
				var check = e.control;
				let emailCheck = app.lookup("check");
				let email = emailCheck.getMetadata("email");
				let memberEmail = app.lookup("memberEmailIpb");
				
				// 입력값이 비어있는지 확인
				if (memberEmail.value.trim() === "") {
					alert("이메일을 입력하세요");
					return; // 사용자가 이메일을 입력할 때까지 다음 코드를 실행하지 않음
				}
				
				// 이메일 중복 확인
				if (email !== null) {
					alert("중복된 이메일입니다.");
				} else {
					alert("사용가능한 이메일입니다.");
				}
			}

			/*
			 * 서브미션에서 submit-error 이벤트 발생 시 호출.
			 * 통신 중 문제가 생기면 발생합니다.
			 */
			function onRegisterSubSubmitError(e) {
				var registerSub = e.control;
				alert("회원가입 실패");
			}

			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onRegisterSubSubmitSuccess(e) {
				var registerSub = e.control;
				alert("회원가입 완료");
				window.location.href = "login";
			}
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("departmentList");
			dataSet_1.parseData({
				"info": "selet",
				"columns": [
					{
						"name": "departmentId",
						"dataType": "string"
					},
					{
						"name": "departmentName",
						"dataType": "string"
					}
				],
				"rows": []
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("positionList");
			dataSet_2.parseData({
				"columns": [{
					"name": "position",
					"dataType": "string"
				}],
				"rows": [
					{"position": "사원"},
					{"position": "주임"},
					{"position": "대리"},
					{"position": "과장"}
				]
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("email");
			dataSet_3.parseData({});
			app.register(dataSet_3);
			var dataMap_1 = new cpr.data.DataMap("member");
			dataMap_1.parseData({
				"columns" : [
					{
						"name": "memberId",
						"dataType": "string"
					},
					{
						"name": "memberName",
						"dataType": "string"
					},
					{
						"name": "memberEmail",
						"dataType": "string"
					},
					{
						"name": "position",
						"dataType": "string"
					},
					{
						"name": "memberPassword",
						"dataType": "string"
					},
					{
						"name": "memberStatus",
						"dataType": "string"
					},
					{
						"name": "managerYn",
						"dataType": "string"
					},
					{
						"name": "departmentId",
						"dataType": "string"
					},
					{
						"name": "leaveCount",
						"dataType": "string"
					}
				]
			});
			app.register(dataMap_1);
			
			var dataMap_2 = new cpr.data.DataMap("department1");
			dataMap_2.parseData({
				"columns" : [
					{
						"name": "departmentName",
						"dataType": "string"
					},
					{"name": "departmentId"}
				]
			});
			app.register(dataMap_2);
			
			var dataMap_3 = new cpr.data.DataMap("registerMemberParam");
			dataMap_3.parseData({
				"columns" : [
					{"name": "memberEmail"},
					{"name": "memberName"},
					{"name": "memberPassword"},
					{
						"name": "departmentId",
						"dataType": "number"
					},
					{"name": "position"}
				]
			});
			app.register(dataMap_3);
			var submission_1 = new cpr.protocols.Submission("memberList");
			submission_1.method = "post";
			submission_1.action = "";
			submission_1.addRequestData(dataMap_1);
			submission_1.addRequestData(dataSet_1);
			submission_1.addRequestData(dataMap_2);
			if(typeof onMemberListSubmitError == "function") {
				submission_1.addEventListener("submit-error", onMemberListSubmitError);
			}
			if(typeof onMemberListSubmitSuccess == "function") {
				submission_1.addEventListener("submit-success", onMemberListSubmitSuccess);
			}
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("deparment");
			submission_2.method = "get";
			submission_2.action = "member";
			submission_2.addRequestData(dataMap_2);
			submission_2.addResponseData(dataSet_1, false);
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("position");
			app.register(submission_3);
			
			var submission_4 = new cpr.protocols.Submission("check");
			submission_4.method = "get";
			submission_4.action = "email";
			submission_4.addRequestData(dataMap_1);
			if(typeof onCheckSubmitSuccess == "function") {
				submission_4.addEventListener("submit-success", onCheckSubmitSuccess);
			}
			app.register(submission_4);
			
			var submission_5 = new cpr.protocols.Submission("registerSub");
			submission_5.action = "member";
			submission_5.addRequestData(dataMap_3);
			if(typeof onRegisterSubSubmitError == "function") {
				submission_5.addEventListener("submit-error", onRegisterSubSubmitError);
			}
			if(typeof onRegisterSubSubmitSuccess == "function") {
				submission_5.addEventListener("submit-success", onRegisterSubSubmitSuccess);
			}
			app.register(submission_5);
			app.supportMedia("all and (min-width: 1928px)", "new-screen");
			app.supportMedia("all and (min-width: 1024px) and (max-width: 1927px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"background-image" : "none",
				"background-color" : "#F8F8F8",
				"width" : "100%",
				"height" : "100%"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var group_1 = new cpr.controls.Container();
			group_1.style.setClasses(["cl-form-group1"]);
			group_1.style.css({
				"border-radius" : "30px",
				"background-color" : "#FEFEFF",
				"color" : "#FFFFFF",
				"background-image" : "none"
			});
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var button_1 = new cpr.controls.Button();
				button_1.value = "중복확인";
				button_1.style.setClasses(["button1"]);
				button_1.style.css({
					"background-color" : "#EBEBEB",
					"border-radius" : "5px",
					"color" : "#070000",
					"font-size" : "16px",
					"font-style" : "normal",
					"background-image" : "none",
					"text-align" : "center"
				});
				if(typeof onButtonClick3 == "function") {
					button_1.addEventListener("click", onButtonClick3);
				}
				container.addChild(button_1, {
					"top": "146px",
					"left": "523px",
					"width": "109px",
					"height": "48px"
				});
				var inputBox_1 = new cpr.controls.InputBox("memberName");
				inputBox_1.secret = false;
				inputBox_1.placeholder = "성명";
				inputBox_1.style.css({
					"border-radius" : "5px",
					"background-color" : "#FFFFFF",
					"color" : "#070000",
					"font-style" : "normal",
					"background-image" : "none",
					"text-align" : "center"
				});
				var dataMapContext_1 = new cpr.bind.DataMapContext(app.lookup("registerMemberParam"));
				inputBox_1.setBindContext(dataMapContext_1);
				inputBox_1.bind("value").toDataMap(app.lookup("registerMemberParam"), "memberName");
				container.addChild(inputBox_1, {
					"top": "242px",
					"left": "160px",
					"width": "352px",
					"height": "48px"
				});
				var inputBox_2 = new cpr.controls.InputBox("passwordIpb");
				inputBox_2.secret = true;
				inputBox_2.placeholder = "비밀번호";
				inputBox_2.style.css({
					"border-radius" : "5px",
					"background-color" : "#FFFFFF",
					"color" : "#070000",
					"font-style" : "normal",
					"background-image" : "none",
					"text-align" : "center"
				});
				var dataMapContext_2 = new cpr.bind.DataMapContext(app.lookup("registerMemberParam"));
				inputBox_2.setBindContext(dataMapContext_2);
				inputBox_2.bind("value").toDataMap(app.lookup("registerMemberParam"), "memberPassword");
				container.addChild(inputBox_2, {
					"top": "357px",
					"left": "160px",
					"width": "352px",
					"height": "48px"
				});
				var inputBox_3 = new cpr.controls.InputBox("checkPasswordIpb");
				inputBox_3.secret = true;
				inputBox_3.placeholder = "비밀번호 확인";
				inputBox_3.style.css({
					"border-radius" : "5px",
					"background-color" : "#FFFFFF",
					"color" : "#070000",
					"font-style" : "normal",
					"background-image" : "none",
					"text-align" : "center"
				});
				container.addChild(inputBox_3, {
					"top": "466px",
					"left": "160px",
					"width": "352px",
					"height": "48px"
				});
				var hTMLSnippet_1 = new cpr.controls.HTMLSnippet();
				hTMLSnippet_1.value = "<div>비밀번호 <\/div>";
				hTMLSnippet_1.style.css({
					"color" : "#070000",
					"font-weight" : "bold",
					"font-size" : "16px",
					"font-family" : "sans-serif",
					"font-style" : "normal"
				});
				container.addChild(hTMLSnippet_1, {
					"top": "328px",
					"left": "160px",
					"width": "100px",
					"height": "30px"
				});
				var hTMLSnippet_2 = new cpr.controls.HTMLSnippet();
				hTMLSnippet_2.value = "<div>비밀번호 확인<\/div>";
				hTMLSnippet_2.style.css({
					"color" : "#070000",
					"font-weight" : "bold",
					"font-size" : "16px",
					"font-family" : "sans-serif",
					"font-style" : "normal"
				});
				container.addChild(hTMLSnippet_2, {
					"top": "438px",
					"left": "160px",
					"width": "234px",
					"height": "30px"
				});
				var hTMLSnippet_3 = new cpr.controls.HTMLSnippet();
				hTMLSnippet_3.value = "<div>성명 <\/div>";
				hTMLSnippet_3.style.css({
					"color" : "#070000",
					"font-weight" : "bold",
					"font-size" : "16px",
					"font-family" : "sans-serif",
					"font-style" : "normal"
				});
				container.addChild(hTMLSnippet_3, {
					"top": "215px",
					"left": "160px",
					"width": "100px",
					"height": "30px"
				});
				var hTMLSnippet_4 = new cpr.controls.HTMLSnippet();
				hTMLSnippet_4.value = "<div>이메일<\/div>\r\n";
				hTMLSnippet_4.style.css({
					"color" : "#070000",
					"font-weight" : "bold",
					"font-size" : "16px",
					"font-family" : "sans-serif",
					"font-style" : "normal"
				});
				container.addChild(hTMLSnippet_4, {
					"top": "116px",
					"left": "160px",
					"width": "100px",
					"height": "30px"
				});
				var comboBox_1 = new cpr.controls.ComboBox("positionCmb");
				comboBox_1.placeholder = "(선택)";
				comboBox_1.style.css({
					"border-radius" : "5px",
					"color" : "#A0A0A0",
					"font-weight" : "500"
				});
				comboBox_1.style.button.css({
					"width" : "30px"
				});
				var dataMapContext_3 = new cpr.bind.DataMapContext(app.lookup("registerMemberParam"));
				comboBox_1.setBindContext(dataMapContext_3);
				comboBox_1.bind("value").toDataMap(app.lookup("registerMemberParam"), "position");
				(function(comboBox_1){
					comboBox_1.setItemSet(app.lookup("positionList"), {
						"label": "position",
						"value": "position"
					});
				})(comboBox_1);
				container.addChild(comboBox_1, {
					"top": "689px",
					"left": "160px",
					"width": "352px",
					"height": "48px"
				});
				var hTMLSnippet_5 = new cpr.controls.HTMLSnippet();
				hTMLSnippet_5.value = "<div>직급<\/div>";
				hTMLSnippet_5.style.css({
					"color" : "#070000",
					"font-weight" : "bold",
					"font-size" : "16px",
					"font-family" : "sans-serif",
					"font-style" : "normal"
				});
				container.addChild(hTMLSnippet_5, {
					"top": "659px",
					"left": "160px",
					"width": "100px",
					"height": "30px"
				});
				var hTMLSnippet_6 = new cpr.controls.HTMLSnippet();
				hTMLSnippet_6.value = "<div>부서<\/div>";
				hTMLSnippet_6.style.css({
					"color" : "#070000",
					"font-weight" : "bold",
					"font-size" : "16px",
					"font-family" : "sans-serif",
					"font-style" : "normal"
				});
				container.addChild(hTMLSnippet_6, {
					"top": "556px",
					"left": "160px",
					"width": "100px",
					"height": "30px"
				});
				var button_2 = new cpr.controls.Button();
				button_2.value = "확인";
				button_2.style.setClasses(["btn-success"]);
				button_2.style.css({
					"background-color" : "#4680FF",
					"color" : "#FFFFFF",
					"font-size" : "16px",
					"font-style" : "normal",
					"background-image" : "none",
					"text-align" : "center"
				});
				if(typeof onButtonClick == "function") {
					button_2.addEventListener("click", onButtonClick);
				}
				container.addChild(button_2, {
					"top": "828px",
					"left": "135px",
					"width": "150px",
					"height": "44px"
				});
				var button_3 = new cpr.controls.Button();
				button_3.value = "취소";
				button_3.style.setClasses(["btn-fail"]);
				button_3.style.css({
					"background-color" : "#929292",
					"color" : "#FFFFFF",
					"font-size" : "16px",
					"font-style" : "normal",
					"background-image" : "none",
					"text-align" : "center"
				});
				if(typeof onButtonClick2 == "function") {
					button_3.addEventListener("click", onButtonClick2);
				}
				container.addChild(button_3, {
					"top": "828px",
					"left": "402px",
					"width": "150px",
					"height": "44px"
				});
				var comboBox_2 = new cpr.controls.ComboBox("departmentCmb");
				comboBox_2.placeholder = "(선택)";
				comboBox_2.style.css({
					"background-color" : "#FFFFFF",
					"border-radius" : "5px",
					"color" : "#A0A0A0",
					"font-weight" : "500",
					"line-height" : "none",
					"text-align" : "left"
				});
				comboBox_2.style.button.css({
					"background-size" : "contain",
					"width" : "30px"
				});
				var dataMapContext_4 = new cpr.bind.DataMapContext(app.lookup("registerMemberParam"));
				comboBox_2.setBindContext(dataMapContext_4);
				comboBox_2.bind("value").toDataMap(app.lookup("registerMemberParam"), "departmentId");
				(function(comboBox_2){
					comboBox_2.addItem(new cpr.controls.Item("", "value3"));
					comboBox_2.setItemSet(app.lookup("departmentList"), {
						"label": "departmentName",
						"value": "departmentId"
					});
				})(comboBox_2);
				if(typeof onCmb2SelectionChange == "function") {
					comboBox_2.addEventListener("selection-change", onCmb2SelectionChange);
				}
				container.addChild(comboBox_2, {
					"top": "585px",
					"left": "160px",
					"width": "352px",
					"height": "48px"
				});
				var inputBox_4 = new cpr.controls.InputBox("memberEmailIpb");
				inputBox_4.placeholder = "이메일 주소는 ID로 사용됩니다.";
				inputBox_4.style.css({
					"border-radius" : "5px",
					"background-color" : "#FFFFF",
					"color" : "#000000",
					"font-weight" : "500",
					"font-style" : "normal",
					"background-image" : "none",
					"text-align" : "center"
				});
				var dataMapContext_5 = new cpr.bind.DataMapContext(app.lookup("registerMemberParam"));
				inputBox_4.setBindContext(dataMapContext_5);
				inputBox_4.bind("value").toDataMap(app.lookup("registerMemberParam"), "memberEmail");
				if(typeof onMemberIdValueChange == "function") {
					inputBox_4.addEventListener("value-change", onMemberIdValueChange);
				}
				container.addChild(inputBox_4, {
					"top": "146px",
					"left": "158px",
					"width": "355px",
					"height": "48px"
				});
				var hTMLSnippet_7 = new cpr.controls.HTMLSnippet();
				hTMLSnippet_7.value = "<h3>회원가입<\/h3>";
				hTMLSnippet_7.style.css({
					"color" : "#DEDEDE",
					"font-weight" : "700",
					"font-size" : "35px"
				});
				container.addChild(hTMLSnippet_7, {
					"top": "-15px",
					"left": "20px",
					"width": "180px",
					"height": "113px"
				});
			})(group_1);
			if(typeof onGroupClick == "function") {
				group_1.addEventListener("click", onGroupClick);
			}
			container.addChild(group_1, {
				"top": "30px",
				"left": "605px",
				"width": "737px",
				"height": "874px"
			});
			if(typeof onBodyInit == "function"){
				app.addEventListener("init", onBodyInit);
			}
		}
	});
	app.title = "Register";
	cpr.core.Platform.INSTANCE.register(app);
})();
