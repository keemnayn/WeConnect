/*
 * App URI: admin/AdminBoard
 * Source Location: admin/AdminBoard.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.4584), Don't edit manually.
 */
(function() {
	var app = new cpr.core.App("admin/AdminBoard", { 
		onPrepare: function(loader) {
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports) {
			var linker = {};
			// Start - User Script
			/************************************************
			 * adminBoard.js
			 * Created at 2023. 8. 9. 오전 9:45:56.
			 *
			 * @author Axl Rose
			 ************************************************/

			/*
			 * 루트 컨테이너에서 init 이벤트 발생 시 호출.
			 * 앱이 최초 구성될 때 발생하는 이벤트 입니다.
			 */
			function onBodyInit(e) {
				app.lookup("freeBoardListSub").send();
				var comboBox = app.lookup("searchTypeCmb");
				comboBox.fieldLabel = "전체";
				comboBox.value = "all";
			}

			/*
			 * 서치 인풋에서 search 이벤트 발생 시 호출.
			 * Searchinput의 enter키 또는 검색버튼을 클릭하여 인풋의 값이 Search될때 발생하는 이벤트
			 */
			function onSearchTextIpbSearch(e) {
				var searchTextIpb = e.control;
				app.lookup("searchFreeBoardSub").send();
			}

			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onSearchFreeBoardSubSubmitSuccess(e) {
				var searchFreeBoardSub = e.control;
				app.lookup("freeBoardListGrd").redraw();
			}

			/*
			 * "삭제" 버튼(deleteBtn)에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onDeleteBtnClick(e) {
				var deleteBtn = e.control;
				var grid = app.lookup("freeBoardListGrd");
				var checkRowIndices = grid.getCheckRowIndices();
				if (checkRowIndices.length > 0) {
					if (confirm("선택한 게시물을 삭제 하시겠 습니까?")) {
						grid.deleteRow(checkRowIndices);
						app.lookup("deleteFreeBoardSub").send();
					}
				} else {
					alert("삭제할 게시물을 선택해주세요");
				}
			}

			/*
			 * 서브미션에서 submit-done 이벤트 발생 시 호출.
			 * 응답처리가 모두 종료되면 발생합니다.
			 */
			function onDeleteFreeBoardSubSubmitDone(e) {
				var deleteFreeBoardSub = e.control;
				app.lookup("freeBoardListSub").send();
			}
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("freeBoardList");
			dataSet_1.parseData({
				"columns": [
					{
						"name": "freeBoardId",
						"dataType": "number"
					},
					{
						"name": "freeBoardTitle",
						"dataType": "string"
					},
					{"name": "freeBoardContent"},
					{
						"name": "memberName",
						"dataType": "string"
					},
					{
						"name": "freeBoardCreate",
						"dataType": "string"
					},
					{
						"name": "freeBoardCommentCount",
						"dataType": "number"
					}
				],
				"rows": []
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("boardSearch");
			dataSet_2.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"}
				],
				"rows": [
					{"label": "전체", "value": "all"},
					{"label": "제목", "value": "title"},
					{"label": "작성자", "value": "writer"}
				]
			});
			app.register(dataSet_2);
			var dataMap_1 = new cpr.data.DataMap("searchParam");
			dataMap_1.parseData({
				"columns" : [
					{"name": "searchType"},
					{"name": "searchText"}
				]
			});
			app.register(dataMap_1);
			var submission_1 = new cpr.protocols.Submission("freeBoardListSub");
			submission_1.method = "get";
			submission_1.action = "admin/free-boards";
			submission_1.addResponseData(dataSet_1, false);
			if(typeof onBoardsSubmitSuccess == "function") {
				submission_1.addEventListener("submit-success", onBoardsSubmitSuccess);
			}
			app.register(submission_1);
			
			var submission_2 = new cpr.protocols.Submission("searchFreeBoardSub");
			submission_2.method = "get";
			submission_2.action = "admin/free-boards/search";
			submission_2.addRequestData(dataMap_1);
			submission_2.addResponseData(dataSet_1, false);
			if(typeof onSearchFreeBoardSubSubmitSuccess == "function") {
				submission_2.addEventListener("submit-success", onSearchFreeBoardSubSubmitSuccess);
			}
			app.register(submission_2);
			
			var submission_3 = new cpr.protocols.Submission("deleteFreeBoardSub");
			submission_3.method = "delete";
			submission_3.action = "admin/free-boards";
			submission_3.addRequestData(dataSet_1);
			if(typeof onDeleteFreeBoardSubSubmitDone == "function") {
				submission_3.addEventListener("submit-done", onDeleteFreeBoardSubSubmitDone);
			}
			app.register(submission_3);
			app.supportMedia("all and (min-width: 1920px)", "new-screen");
			app.supportMedia("all and (min-width: 1024px) and (max-width: 1919px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"height" : "100%"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var tabFolder_1 = new cpr.controls.TabFolder();
			
			var tabItem_1 = (function(tabFolder){
				var tabItem_1 = new cpr.controls.TabItem();
				tabItem_1.text = "자유게시판";
				var group_1 = new cpr.controls.Container();
				var xYLayout_2 = new cpr.controls.layouts.XYLayout();
				group_1.setLayout(xYLayout_2);
				(function(container){
					var grid_1 = new cpr.controls.Grid("freeBoardListGrd");
					grid_1.init({
						"dataSet": app.lookup("freeBoardList"),
						"columns": [
							{"width": "25px"},
							{
								"width": "100px",
								"visible": false
							},
							{"width": "100px"},
							{"width": "150px"},
							{"width": "75px"},
							{"width": "75px"},
							{"width": "50px"}
						],
						"header": {
							"rows": [{"height": "50px"}],
							"cells": [
								{
									"constraint": {"rowIndex": 0, "colIndex": 0},
									"configurator": function(cell){
										cell.columnType = "checkbox";
										cell.filterable = false;
										cell.sortable = false;
										cell.style.css({
											"text-align" : "center"
										});
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 1},
									"configurator": function(cell){
										cell.filterable = false;
										cell.sortable = false;
										cell.targetColumnName = "freeBoardId";
										cell.text = "freeBoardId";
										cell.style.css({
											"text-align" : "center"
										});
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 2},
									"configurator": function(cell){
										cell.filterable = false;
										cell.sortable = false;
										cell.targetColumnName = "freeBoardTitle";
										cell.text = "제목";
										cell.style.css({
											"text-align" : "center"
										});
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 3},
									"configurator": function(cell){
										cell.filterable = false;
										cell.sortable = false;
										cell.targetColumnName = "freeBoardContent";
										cell.text = "글 내용";
										cell.style.css({
											"text-align" : "center"
										});
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 4},
									"configurator": function(cell){
										cell.filterable = false;
										cell.sortable = false;
										cell.targetColumnName = "memberName";
										cell.text = "작성자";
										cell.style.css({
											"text-align" : "center"
										});
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 5},
									"configurator": function(cell){
										cell.filterable = false;
										cell.sortable = false;
										cell.targetColumnName = "freeBoardCreate";
										cell.text = "등록일";
										cell.style.css({
											"text-align" : "center"
										});
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 6},
									"configurator": function(cell){
										cell.filterable = false;
										cell.sortable = false;
										cell.targetColumnName = "freeBoardCommentCount";
										cell.text = "댓글 수";
										cell.style.css({
											"text-align" : "center"
										});
									}
								}
							]
						},
						"detail": {
							"rows": [{"height": "50px"}],
							"cells": [
								{
									"constraint": {"rowIndex": 0, "colIndex": 0},
									"configurator": function(cell){
										cell.columnType = "checkbox";
										cell.style.css({
											"text-align" : "center"
										});
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 1},
									"configurator": function(cell){
										cell.columnName = "freeBoardId";
										cell.style.css({
											"text-align" : "center"
										});
										cell.control = (function(){
											var output_1 = new cpr.controls.Output();
											output_1.style.css({
												"text-align" : "center"
											});
											output_1.bind("value").toDataColumn("freeBoardId");
											return output_1;
										})();
										cell.controlConstraint = {};
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 2},
									"configurator": function(cell){
										cell.columnName = "freeBoardTitle";
										cell.style.css({
											"text-align" : "center"
										});
										cell.control = (function(){
											var output_2 = new cpr.controls.Output();
											output_2.style.css({
												"text-align" : "center"
											});
											output_2.bind("value").toDataColumn("freeBoardTitle");
											return output_2;
										})();
										cell.controlConstraint = {};
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 3},
									"configurator": function(cell){
										cell.columnName = "freeBoardContent";
										cell.style.css({
											"text-align" : "center"
										});
										cell.control = (function(){
											var output_3 = new cpr.controls.Output();
											output_3.style.css({
												"text-align" : "center"
											});
											output_3.bind("value").toDataColumn("freeBoardContent");
											return output_3;
										})();
										cell.controlConstraint = {};
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 4},
									"configurator": function(cell){
										cell.columnName = "memberName";
										cell.style.css({
											"text-align" : "center"
										});
										cell.control = (function(){
											var output_4 = new cpr.controls.Output();
											output_4.style.css({
												"text-align" : "center"
											});
											output_4.bind("value").toDataColumn("memberName");
											return output_4;
										})();
										cell.controlConstraint = {};
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 5},
									"configurator": function(cell){
										cell.columnName = "freeBoardCreate";
										cell.style.css({
											"text-align" : "center"
										});
										cell.control = (function(){
											var output_5 = new cpr.controls.Output();
											output_5.style.css({
												"text-align" : "center"
											});
											output_5.bind("value").toDataColumn("freeBoardCreate");
											return output_5;
										})();
										cell.controlConstraint = {};
									}
								},
								{
									"constraint": {"rowIndex": 0, "colIndex": 6},
									"configurator": function(cell){
										cell.columnName = "freeBoardCommentCount";
										cell.style.css({
											"text-align" : "center"
										});
										cell.control = (function(){
											var output_6 = new cpr.controls.Output();
											output_6.style.css({
												"text-align" : "center"
											});
											output_6.bind("value").toDataColumn("freeBoardCommentCount");
											return output_6;
										})();
										cell.controlConstraint = {};
									}
								}
							]
						}
					});
					grid_1.style.header.css({
						"font-weight" : "800",
						"background-image" : "none"
					});
					if(typeof onGrd1SelectionChange == "function") {
						grid_1.addEventListener("selection-change", onGrd1SelectionChange);
					}
					container.addChild(grid_1, {
						"top": "50px",
						"right": "0px",
						"bottom": "0px",
						"left": "0px"
					});
					var group_2 = new cpr.controls.Container();
					var formLayout_1 = new cpr.controls.layouts.FormLayout();
					formLayout_1.scrollable = false;
					formLayout_1.topMargin = "5px";
					formLayout_1.rightMargin = "5px";
					formLayout_1.bottomMargin = "5px";
					formLayout_1.leftMargin = "5px";
					formLayout_1.horizontalSpacing = "10px";
					formLayout_1.verticalSpacing = "10px";
					formLayout_1.setColumns(["1fr"]);
					formLayout_1.setRows(["1fr"]);
					group_2.setLayout(formLayout_1);
					(function(container){
						var button_1 = new cpr.controls.Button("deleteBtn");
						button_1.value = "삭제";
						if(typeof onDeleteBtnClick == "function") {
							button_1.addEventListener("click", onDeleteBtnClick);
						}
						container.addChild(button_1, {
							"colIndex": 0,
							"rowIndex": 0
						});
					})(group_2);
					container.addChild(group_2, {
						"top": "5px",
						"right": "0px",
						"width": "66px",
						"height": "40px"
					});
					var comboBox_1 = new cpr.controls.ComboBox("searchTypeCmb");
					comboBox_1.style.css({
						"border-radius" : "8px",
						"text-align" : "center"
					});
					var dataMapContext_1 = new cpr.bind.DataMapContext(app.lookup("searchParam"));
					comboBox_1.setBindContext(dataMapContext_1);
					comboBox_1.bind("value").toDataMap(app.lookup("searchParam"), "searchType");
					(function(comboBox_1){
						comboBox_1.setItemSet(app.lookup("boardSearch"), {
							"label": "label",
							"value": "value"
						});
					})(comboBox_1);
					container.addChild(comboBox_1, {
						"top": "10px",
						"right": "380px",
						"width": "100px",
						"height": "30px"
					});
					var searchInput_1 = new cpr.controls.SearchInput("searchTextIpb");
					searchInput_1.style.css({
						"border-radius" : "5px"
					});
					var dataMapContext_2 = new cpr.bind.DataMapContext(app.lookup("searchParam"));
					searchInput_1.setBindContext(dataMapContext_2);
					searchInput_1.bind("value").toDataMap(app.lookup("searchParam"), "searchText");
					if(typeof onSearchTextIpbSearch == "function") {
						searchInput_1.addEventListener("search", onSearchTextIpbSearch);
					}
					container.addChild(searchInput_1, {
						"top": "10px",
						"right": "80px",
						"width": "280px",
						"height": "30px"
					});
				})(group_1);
				tabItem_1.content = group_1;
				return tabItem_1;
			})(tabFolder_1);
			tabFolder_1.addTabItem(tabItem_1);
			tabFolder_1.setSelectedTabItem(tabItem_1);
			container.addChild(tabFolder_1, {
				"top": "0px",
				"right": "0px",
				"bottom": "0px",
				"left": "0px"
			});
			if(typeof onBodyInit == "function"){
				app.addEventListener("init", onBodyInit);
			}
		}
	});
	app.title = "AdminBoard";
	cpr.core.Platform.INSTANCE.register(app);
})();
